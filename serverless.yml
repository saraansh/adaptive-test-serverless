service: adaptive-test-serverless

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  role: sampleRole
  runtime: python3.7
  timeout: 30
  stage: ${opt:stage, self:custom.defaultStage}
  region: us-east-1
  versionFunctions: false
  environment:
    NAME: ${self:provider.stage}

custom:
  defaultStage: development

package:
  include:
    - handler.py
    - src/**
  exclude:
    - node_modules/**
    - venv/**

layers:
  layer1:
    path: layers # required, path to layer contents on disk
    name: ${self:service}-${self:provider.stage}-layer # optional, Deployed Lambda layer name
    description: contains packages for numpy, catsim # optional, Description to publish to AWS
    compatibleRuntimes: # optional, list of runtimes this layer is compatible with
      - python3.8
      - python3.7

functions:
  getNextTestItem:
    handler: handler.getNextTestItem
    name: ${self:service}-${self:provider.stage}-adaptive
    layers:
    - { Ref: Layer1LambdaLayer }
    description: Get next testItem for adaptive test
    events:
      - http:
          path: /get-next-test-item
          method: POST
          cors: true

plugins:
  - serverless-offline

resources:
  Resources:
    sampleRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sampleRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2021-07-10'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: samplePolicy
            PolicyDocument:
              Version: '2021-07-10'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 's3:PutObject'
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - 'Ref': 'ServerlessDeploymentBucket'
